plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version + "+" + project.minecraft_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        name = "Terraformers"
        url = "https://maven.terraformersmc.com/"
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "Ladysnake Libs"
        url = 'https://maven.ladysnake.org/releases'
    }
    maven { url 'https://maven.wispforest.io/releases/' }
    maven {
        name = "Greenhouse Maven"
        url = 'https://repo.greenhouse.house/releases/'
    }
    maven {
        name = "Greenhouse Maven (Snapshots)"
        url = 'https://repo.greenhouse.house/snapshots/'
    }
    maven {
        url "https://jitpack.io/" // Fabric ASM
        content {
            excludeGroup "io.github.fabricators_of_create"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${project.parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // MixinExtras 0.5 beta
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixinextras_version}"))
    include("io.github.llamalad7:mixinextras-fabric:${project.mixinextras_version}")

    // MixinConstraints
    include(implementation("com.moulberry:mixinconstraints:${project.mixinconstraints_version}"))

    // JsonPatcher
    modImplementation(include("com.github.mattidragon:jsonpatcher:${project.jsonpatcher_version + "-mc." + project.minecraft_version}"))
    modCompileOnly "com.github.MattiDragon:JsonPatcherLang:v1.0.0"

    // Custom Brew Recipes
    modImplementation(include("maven.modrinth:custombrewrecipes:${project.custombrewrecipes_version}"))

    // exp4j
    include "net.objecthunter:exp4j:${project.exp4j_version}"
    implementation "net.objecthunter:exp4j:${project.exp4j_version}"

    // ModMenu
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")

    // owo-lib
    annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")

    // Disable Custom Worlds Advice
    modImplementation(include("maven.modrinth:dcwa:${project.dcwa_version}"))

    // Trinkets
    modImplementation "dev.emi:trinkets:${project.trinkets_version}"

    // EMI
    modImplementation "dev.emi:emi-fabric:${project.emi_version}"

    // Carpet
    // modImplementation "com.github.gnembon:fabric-carpet:${project.carpet_version}"

    // Serene Seasons
    modCompileOnly "maven.modrinth:serene-seasons:${project.sereneseasons_version}"

    // Notes
    modImplementation "maven.modrinth:notes:${project.notes_version}"

    // Farmer's Delight Refabricated
    modImplementation("vectorwing:FarmersDelight:${fdrf_version}") {
        exclude(group: "net.fabricmc")
    }

    // Raised
    modImplementation "maven.modrinth:raised:${project.raised_version}"
}

loom {
    accessWidenerPath = file("src/main/resources/cherry-on-top.accesswidener")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE.md") {
        rename {"${project.archivesBaseName}_${it}"}
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
